name: Build OS images (bootc)

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - '*/bootc'
  push:
    branches:
      - main
    paths:
      - '*/bootc'

env:
  OCI_REGISTRY: quay.io
  OCI_ORG: flightctl-demos

jobs:
  find-changed-bootc-images:
    runs-on: ubuntu-24.04

    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed bootc images
        id: changed-dirs
        uses: tj-actions/changed-files@v45
        with:
          dir_names: true
          files: |
            **/bootc/**
          matrix: true

      - name: Set output in matrix format
        id: set-output
        run: |
          case "${{ github.event_name }}" in
            pull_request|push)
              dirs='${{ steps.changed-dirs.outputs.all_changed_files }}'
              ;;
            workflow_dispatch)
              dirs=$(ls -d */bootc 2> /dev/null | jq -R . | jq -s .)
              ;;
            *) echo "Unknown event: ${{ github.event_name }}" && exit 1;;
          esac
          dirs=$(echo "${dirs}" | jq -c 'map(split("/") | .[-2])')
          echo "changed_images=${dirs}"
          echo "changed_images=${dirs}" >> "$GITHUB_OUTPUT"

    outputs:
      images: ${{ steps.set-output.outputs.changed_images }}


  build-bootc-images:
    needs: [find-changed-bootc-images]

    if: ${{ needs.find-changed-bootc-images.outputs.images != '[]' }}

    strategy:
      matrix:
        image: ${{ fromJSON(needs.find-changed-bootc-images.outputs.images) }}
        runner: ["ubuntu-24.04","ubuntu-24.04-arm"]
      max-parallel: 4
      fail-fast: false

    permissions:
        contents: read
  
    runs-on: ${{ matrix.runner }}

    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged

    env:
      ARCH: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'arm64' || 'amd64' }}

    steps:
      - name: Clone the repository
        uses: actions/checkout@v4

      - name: Install Podman 5 and container tools and configure them to attach Sigstore signatures
        run: |
          dnf -y install podman
          tee "/etc/containers/registries.d/${{ env.OCI_REGISTRY }}.yaml" > /dev/null <<EOF
            docker:
              ${{ env.OCI_REGISTRY }}:
                use-sigstore-attachments: true
          EOF

      - name: Log in to OCI registry
        run: podman login -u '${{ secrets.QUAY_PUBLISHER_USERNAME }}' -p '${{ secrets.QUAY_PUBLISHER_PASSWORD }}' ${{ env.OCI_REGISTRY }}

      - name: Set env vars
        run: |
          echo "OCI_IMAGE=${{ env.OCI_REGISTRY }}/${{ env.OCI_ORG }}/${{ matrix.image }}" >> $GITHUB_ENV
          echo "OCI_IMAGE_TAG=${GITHUB_SHA::8}-${{ env.ARCH }}" >> $GITHUB_ENV

      - name: Build bootc image
        run: |
          pushd ${{ matrix.image }}/bootc
          podman build -t ${OCI_IMAGE}:${OCI_IMAGE_TAG} -f Containerfile.${{ env.ARCH }} .
          popd

      - name: Push image to registry and sign it
        run: |
          printf '%s' '${{ secrets.SIGNING_KEY_PRIVATE }}' > ./signingkey.private
          podman push --sign-by-sigstore-private-key ./signingkey.private ${OCI_IMAGE}:${OCI_IMAGE_TAG}


  build-bootc-manifestlist:
    needs: [find-changed-bootc-images,build-bootc-images]

    if: ${{ needs.find-changed-bootc-images.outputs.images != '[]' }}

    strategy:
      matrix:
        image: ${{ fromJSON(needs.find-changed-bootc-images.outputs.images) }}
      max-parallel: 4
      fail-fast: false

    runs-on: ubuntu-24.04

    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged

    env:
      ARCH: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'arm64' || 'amd64' }}

    steps:
      - name: Install container tools and configure them to attach Sigstore signatures
        run: |
          dnf -y install podman
          tee "/etc/containers/registries.d/${{ env.OCI_REGISTRY }}.yaml" > /dev/null <<EOF
            docker:
              ${{ env.OCI_REGISTRY }}:
                use-sigstore-attachments: true
          EOF

      - name: Log in to OCI registry
        run: podman login -u '${{ secrets.QUAY_PUBLISHER_USERNAME }}' -p '${{ secrets.QUAY_PUBLISHER_PASSWORD }}' ${{ env.OCI_REGISTRY }}

      - name: Set env vars
        run: |
          echo "OCI_IMAGE=${{ env.OCI_REGISTRY }}/${{ env.OCI_ORG }}/${{ matrix.image }}" >> $GITHUB_ENV
          echo "OCI_IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Create manifest list
        run: |
          podman manifest create ${OCI_IMAGE}:${OCI_IMAGE_TAG}
          for arch in amd64 arm64; do
            podman manifest add \
              ${OCI_IMAGE}:${OCI_IMAGE_TAG} \
              docker://${OCI_IMAGE}:${OCI_IMAGE_TAG}-${arch}
          done

      - name: Push manifest list to registry and sign it
        run: |
          printf '%s' '${{ secrets.SIGNING_KEY_PRIVATE }}' > ./signingkey.private
          podman manifest push --all \
            --sign-by-sigstore-private-key ./signingkey.private \
            ${OCI_IMAGE}:${OCI_IMAGE_TAG} \
            docker://${.OCI_IMAGE}:${OCI_IMAGE_TAG}


  build-bootc-disk-images:
    needs: [find-changed-bootc-images,build-bootc-images]

    if: ${{ needs.find-changed-bootc-images.outputs.images != '[]' }}

    strategy:
      matrix:
        image: ${{ fromJSON(needs.find-changed-bootc-images.outputs.images) }}
        runner: ["ubuntu-24.04","ubuntu-24.04-arm"]
        format: [iso, qcow2, raw]
      max-parallel: 4
      fail-fast: false

    runs-on: ${{ matrix.runner }}

    env:
      ARCH: ${{ (matrix.runner == 'ubuntu-24.04-arm') && 'arm64' || 'amd64' }}

    steps:
      - name: Clone the repository
        uses: actions/checkout@v4

      - name: Setup Podman 5
        uses: ./.github/actions/setup-podman5

      - name: Log in to OCI registry
        run: podman login -u '${{ secrets.QUAY_PUBLISHER_USERNAME }}' -p '${{ secrets.QUAY_PUBLISHER_PASSWORD }}' ${{ env.OCI_REGISTRY }}

      - name: Set env vars
        run: |
          echo "OCI_IMAGE=${{ env.OCI_REGISTRY }}/${{ env.OCI_ORG }}/${{ matrix.image }}" >> $GITHUB_ENV
          echo "OCI_IMAGE_TAG=${GITHUB_SHA::8}-${{ env.ARCH }}" >> $GITHUB_ENV
          echo "OCI_DISK_IMAGE=${{ env.OCI_REGISTRY }}/${{ env.OCI_ORG }}/${{ matrix.image }}/diskimage-${{ matrix.format }}" >> $GITHUB_ENV
          echo "OCI_DISK_IMAGE_TAG=${GITHUB_SHA::8}-${{ env.ARCH }}" >> $GITHUB_ENV

      - name: Build disk image
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/output"

          sudo podman pull ${OCI_IMAGE}:${OCI_IMAGE_TAG}

          sudo podman run --rm -it --privileged --pull=newer \
            --security-opt label=type:unconfined_t \
            -v "${GITHUB_WORKSPACE}/output:/output" \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            quay.io/centos-bootc/bootc-image-builder:latest \
              --target-arch ${{ env.ARCH }} \
              --type ${{ matrix.format }} \
              ${OCI_IMAGE}:${OCI_IMAGE_TAG}

          sudo chown -R $(whoami):$(whoami) "${GITHUB_WORKSPACE}/output"

          case ${{ matrix.format }} in
            raw)   echo "DISK_IMAGE_FILE=output/image/disk.raw" >> $GITHUB_ENV;;
            qcow2) echo "DISK_IMAGE_FILE=output/qcow2/disk.qcow2" >> $GITHUB_ENV;;
            iso)   echo "DISK_IMAGE_FILE=output/bootiso/install.iso" >> $GITHUB_ENV;;
          esac

      # Upload all formats except QCoW2 as OCI artifact
      - name: Push disk image to registry as OCI artifact and sign it
        if: ${{ matrix.format != 'qcow2' }}
        run: |
          printf '%s' '${{ secrets.SIGNING_KEY_PRIVATE }}' > ./signingkey.private

          podman manifest create ${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG}

          podman manifest add \
            --artifact --artifact-type "application/vnd.diskimage.${{ matrix.format }}" \
            --arch=${{ env.ARCH }} --os=linux \
            ${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG} \
            ${DISK_IMAGE_FILE}

          podman manifest push \
            --sign-by-sigstore-private-key ./signingkey.private \
            ${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG} \
            docker://${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG}

      # Upload QCoW2 as "containerdisk" OCI image as expected by KubeVirt
      - name: Create the Containerfile for building the containerdisk image
        if: ${{ matrix.format == 'qcow2' }}
        run: |
          cat <<EOF > Containerfile.qcow2
          FROM registry.access.redhat.com/ubi9/ubi:latest AS builder
          ADD --chown=107:107 ${DISK_IMAGE_FILE} /disk/
          RUN chmod 0440 /disk/*

          FROM scratch
          COPY --from=builder /disk/* /disk/
          EOF

      - name: Build the containerdisk image
        if: ${{ matrix.format == 'qcow2' }}
        run: |
          podman build -t ${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG} -f Containerfile.qcow2 .

      - name: Push the containerdisk image to registry as OCI image and sign it
        if: ${{ matrix.format == 'qcow2' }}
        run: |
          printf '%s' '${{ secrets.SIGNING_KEY_PRIVATE }}' > ./signingkey.private
          podman push --sign-by-sigstore-private-key ./signingkey.private ${OCI_DISK_IMAGE}:${OCI_DISK_IMAGE_TAG}
